@page "/login"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using MyBlazorApp.Services;
@using MyBlazorApp.Services.Interfaces;
@using MyDtos;

<style>
    /* Left-align the login form and reduce text box size */
    .login-form {
        max-width: 300px;
        margin: 20px;
    }

    .form-group label {
        font-size: 16px;
    }

    .form-group input {
        font-size: 16px;
        height: 45px;
    }

    .register-link {
        font-size: 16px;
        cursor: pointer;
        color: #007bff; /* Blue color for links */
    }
</style>

        <div class="login-form">
            <h3>Login</h3>

            <div class="form-group mt-3">
                <label for="username">Username</label>
                <input type="text" id="username" @bind="Username" class="form-control" placeholder="Username" />
            </div>

            <div class="form-group mt-3">
                <label for="password">Password</label>
                <input type="password" id="password" @bind="Password" class="form-control" placeholder="Password" />
            </div>

            <div class="form-group mt-3 d-flex justify-content-between align-items-center">
                <div>
                    <span class="register-link" @onclick="NavigateToRegister">Register User</span>
                </div>
                <button class="btn btn-primary" @onclick="LoginAsync">Login</button>
            </div>
        </div>



@code {
    private string Username { get; set; }
    private string Password { get; set; }

    private async Task LoginAsync()
    {
        // Validate the form data
        if (string.IsNullOrEmpty(Username) || string.IsNullOrEmpty(Password))
        {
            // Show an error message or perform necessary validation
            return;
        }

        // Create a model to send to the API for login
        var loginDto = new LoginDto
            {
                Username = Username,
                Password = Password
            };

        // Make an API call to authenticate the user
        var result = await AuthService.Login(loginDto);

        if (result)
        {
            // Authentication successful, redirect to the main page or dashboard
            NavigationManager.NavigateTo("/products", true);
        }
        else
        {
            // Authentication failed, show an error message
            // or handle the error appropriately
        }
    }

    private async Task NavigateToRegister()
    {
        NavigationManager.NavigateTo("/Register");
    }
    }
